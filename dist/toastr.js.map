{"version":3,"sources":["toastr.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","toastr","options","this","container","listener","toastId","toastType","error","info","success","warning","previousToast","undefined","value","createContainer","getOptions","document","getElementById","containerId","message","title","optionsOverride","notify","type","iconClass","iconClasses","callback","toastElement","clearOptions","getContainer","clearToast","clearContainer","matches","removeToast","hasChildNodes","remove","numToastsToClear","children","item","forceToastClosure","force","isElementVisible","parentNode","removeChild","childNodes","createElement","classList","add","positionClass","setAttribute","querySelector","appendChild","tapToDismiss","toastClass","debug","showMethod","showDuration","showEasing","onShown","hideMethod","hideDuration","hideEasing","onHidden","extendedTimeOut","timeOut","titleClass","messageClass","closeHtml","newestOnTop","preventDuplicates","progressBar","args","map","personalizeToast","setIcon","setTitle","setMessage","setCloseButton","closeElement","setProgressBar","handleEvents","addEventListener","stickAround","delayedHideToast","onclick","hideToast","closeButton","event","stopPropagation","cancelBubble","displayToast","console","log","setSequence","call","animationFinishedCallback","intervalId","setTimeout","maxHideTime","parseFloat","hideEta","Date","getTime","setInterval","updateProgress","animateToastIn","animateInPlayer","animate","opacity","duration","iterations","delay","onfinish","iconElement","innerContent","innerHTML","firstNode","firstChild","insertBefore","titleElement","mapMessage","messageElement","progressElement","shouldExit","override","clearTimeout","animateToastOut","percentage","style","width","assign","response","state","startTime","publish","getDefaultOptions","element","offsetWidth","offsetHeight","window"],"mappings":"AAcA,YAIA,SAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,cAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,MAF3hBkB,OAAM,WAEG,QAFTA,GAEUC,GAaR,MAPArB,iBAAgBsB,KARlBF,GAGEE,KAAKC,UAAY,KACjBD,KAAKE,SAAW,KAChBF,KAAKG,QAAU,EACfH,KAAKI,WACDC,MAAO,QACPC,KAAM,OACNC,QAAS,UACTC,QAAS,WAEbR,KAAKS,cAAgBC,OACrBV,KAAKD,QAAUA,EAERC,KAupBX,MApoBAlB,cAlCEgB,IAmCEJ,IAAK,eACLiB,MAZQ,SAACZ,EAASa,GAQlB,MANuB,mBAAZb,KACPA,EAAUC,KAAKa,cAGnBb,KAAKC,UAAYa,SAASC,eAAehB,EAAQiB,aAE1B,OAAnBhB,KAAKC,UACED,KAAKC,WAGZW,IACAZ,KAAKC,UAAYD,KAAKY,gBAAgBb,IAGnCC,KAAKC,cAsBZP,IAAK,QACLiB,MAdC,SAACM,EAASC,EAAOC,GAClB,MAAOnB,MAAKoB,QACRC,KAAMrB,KAAKI,UAAUC,MACrBiB,UAAWtB,KAAKa,aAAaU,YAAYlB,MACzCY,QAASA,EACTE,gBAAiBA,EACjBD,MAAOA,OAyBXxB,IAAK,OACLiB,MAhBA,SAACM,EAASC,EAAOC,GACjB,MAAOnB,MAAKoB,QACRC,KAAMrB,KAAKI,UAAUE,KACrBgB,UAAWtB,KAAKa,aAAaU,YAAYjB,KACzCW,QAASA,EACTE,gBAAiBA,EACjBD,MAAOA,OA2BXxB,IAAK,UACLiB,MAlBG,SAACM,EAASC,EAAOC,GACpB,MAAOnB,MAAKoB,QACRC,KAAMrB,KAAKI,UAAUG,QACrBe,UAAWtB,KAAKa,aAAaU,YAAYhB,QACzCU,QAASA,EACTE,gBAAiBA,EACjBD,MAAOA,OA6BXxB,IAAK,UACLiB,MApBG,SAACM,EAASC,EAAOC,GACpB,MAAOnB,MAAKoB,QACRC,KAAMrB,KAAKI,UAAUI,QACrBc,UAAWtB,KAAKa,aAAaU,YAAYf,QACzCS,QAASA,EACTE,gBAAiBA,EACjBD,MAAOA,OA6BXxB,IAAK,YACLiB,MAtBK,SAACa,GACNxB,KAAKE,SAAWsB,KA+BhB9B,IAAK,QACLiB,MAxBC,SAACc,EAAcC,GAEhB,GAAI3B,GAAUC,KAAKa,YAEI,QAAnBb,KAAKC,WACLD,KAAK2B,aAAa5B,GAAQ,GAGzBC,KAAK4B,WAAWH,EAAc1B,EAAS2B,IACxC1B,KAAK6B,eAAe9B,MAkCxBL,IAAK,SACLiB,MA1BE,SAACc,GACH,GAAI1B,GAAUC,KAAKa,YAMnB,OAJ+B,mBAApBb,MAAKC,WACZD,KAAK2B,aAAa5B,GAAS,GAGH,mBAAlB0B,IAAiCA,EAAaK,QAAQ,cAC5D9B,MAAK+B,YAAYN,QAIhBzB,KAAKC,UAAU+B,iBAChBhC,KAAKC,UAAUgC,aAmCnBvC,IAAK,iBACLiB,MA5BW,SAACZ,GACZ,GAAGC,KAAKC,UAGJ,IAAI,GAFAiC,GAAmBlC,KAAKC,UAAUkC,SAAShD,OAEvCD,EAAIgD,EAAmB,EAAGhD,GAAK,IAAMA,EAAE,CAC3C,GAAIkD,GAAOpC,KAAKC,UAAUkC,SAASjD,EAEnCc,MAAK4B,WAAWQ,EAAMrC,OA2C9BL,IAAK,aACLiB,MA9BO,SAACc,EAAc1B,EAAS2B,GAE/B,GAA4B,mBAAlBD,GAA8B,CACpC,GAAIY,GAAoBX,GAAgBA,EAAaY,MAAQZ,EAAaY,OAAQ,CAElF,IAAID,IAAsBZ,EAAaK,QAAQ,UAI3C,MAHA9B,MAAK+B,YAAYN,IAGV,EAIf,OAAO,KAsCP/B,IAAK,cACLiB,MAhCO,SAACc,GAEuB,mBAApBzB,MAAKC,YACZD,KAAKC,UAAYD,KAAK2B,gBAGtB3B,KAAKuC,iBAAiBd,KAK1BA,EAAae,WAAWC,YAAYhB,GAEpCA,EAAe,KAE0B,IAArCzB,KAAKC,UAAUyC,WAAWvD,QAAgBa,KAAKC,UAAUuC,aACzDxC,KAAKC,UAAUuC,WAAWC,YAAYzC,KAAKC,WAC3CD,KAAKS,cAAgBC,YA4CzBhB,IAAK,kBACLiB,MAjCW,SAACZ,GASZ,MARAC,MAAKC,UAAYa,SAAS6B,cAAc,OACxC3C,KAAKC,UAAU2C,UAAUC,IAAI9C,EAAQ+C,eACrC9C,KAAKC,UAAU8C,aAAa,KAAKhD,EAAQiB,aACzChB,KAAKC,UAAU8C,aAAa,YAAY,UACxC/C,KAAKC,UAAU8C,aAAa,OAAO,SAEnCjC,SAASkC,cAAcjD,EAAQf,QAAQiE,YAAYjD,KAAKC,WAEjDD,KAAKC,aAoCZP,IAAK,oBACLiB,MAlCa,WACb,OACIuC,cAAc,EACdC,WAAY,QACZnC,YAAa,kBACboC,OAAO,EAEPC,WAAY,SACZC,aAAc,IACdC,WAAY,QACZC,QAAS9C,OACT+C,WAAY,UACZC,aAAc,IACdC,WAAY,QACZC,SAAUlD,OAEVmD,gBAAiB,IACjBtC,aACIlB,MAAO,cACPC,KAAM,aACNC,QAAS,gBACTC,QAAS,iBAEbc,UAAW,aACXwB,cAAe,kBACfgB,QAAS,IACTC,WAAY,cACZC,aAAc,gBACdhF,OAAQ,OACRiF,UAAW,QACXC,aAAa,EACbC,mBAAmB,EACnBC,aAAa,MA2CjB1E,IAAK,UACLiB,MApCG,SAAC0D,GAE0B,mBAAnBrE,MAAKE,UAA+C,OAAlBF,KAAKE,UAIlDF,KAAKE,SAASmE,MA6Cd3E,IAAK,SACLiB,MAtCE,SAAC2D,GA6DH,QAASC,KACLC,EAAQlD,GACRmD,EAASvD,GACTwD,EAAWzD,GACX0D,EAAeC,GACfC,IAGJ,QAASC,KAELrD,EAAasD,iBAAiB,YAAaC,GAC3CvD,EAAasD,iBAAiB,WAAYE,IAErClF,EAAQmF,SAAWnF,EAAQmD,cAC5BzB,EAAasD,iBAAiB,QAASI,GAGvCpF,EAAQqF,aAAeR,GACvBA,EAAaG,iBAAiB,QAAS,SAAUM,GACzCA,EAAMC,gBACND,EAAMC,kBACwB5E,SAAvB2E,EAAME,cAA8BF,EAAME,gBAAiB,IAClEF,EAAME,cAAe,GAEzBJ,GAAU,KAIdpF,EAAQmF,SACRzD,EAAasD,iBAAiB,QAAS,WACnChF,EAAQmF,UACRC,MAQZ,QAASK,KAELC,QAAQC,IAAI,gCAAiCjE,GAG7CkE,EAAYC,KAAK5F,MAEc,kBAArBD,GAAQyD,SACdzD,EAAQyD,SAGZ,IAAIqC,GAA4B,SAAUxB,GAEtCoB,QAAQC,IAAI,gCAAiCrB,GAEzCtE,EAAQ+D,QAAU,IAClBgC,EAAaC,WAAWZ,EAAWpF,EAAQ+D,SAC3CM,EAAY4B,YAAcC,WAAWlG,EAAQ+D,SAC7CM,EAAY8B,SAAU,GAAIC,OAAOC,UAAYhC,EAAY4B,YACrDjG,EAAQqE,cACRA,EAAY0B,WAAaO,YAAYC,EAAgB,MAKjEC,GAAe9E,EAAcoE,GASjC,QAASU,GAAe9E,EAAcoE,GAClC,GAAIW,GAAkB/E,EAAagF,UAC9BC,QAAS,IACTA,QAAS,KAEVC,SAAU5G,EAAQuD,aAClBsD,WAAY,EACZC,MAAO,GAEXL,GAAgBM,SAAWjB,EAQ/B,QAASrB,GAAQlD,GACb,GAAgC,mBAArBvB,GAAQuB,UAA0B,CAC5CyF,EAAYnE,UAAUC,IAAI,aACvB,IAAImE,GAAe,EACnB,QAAO1F,GACH,IAAM,aACF0F,EAAe,mCACf,MACJ,KAAK,aACDA,EAAe,4CACf,MACJ,KAAK,cACDA,EAAe,0CACf,MACJ,KAAK,gBACDA,EAAe,8BAGvBD,EAAYE,UAAYD,EAC3BvF,EAAawB,YAAY8D,GACtBtF,EAAamB,UAAUC,IAAI9C,EAAQoD,aAI3C,QAASwC,KACL,GAAI1F,GAAYD,KAAK2B,cAErB,IAAI5B,EAAQmE,YAAa,CACrB,GAAIgD,GAAYjH,EAAUkH,UAE1BlH,GAAUmH,aAAa3F,EAAcyF,OAKrCjH,GAAUgD,YAAYxB,EAG1BzB,MAAKC,UAAYA,EAMrB,QAASwE,GAASvD,GACQ,mBAAXA,KACPmG,EAAaJ,UAAY/F,EACzBmG,EAAazE,UAAUC,IAAI9C,EAAQgE,YACnCtC,EAAawB,YAAYoE,IAOjC,QAAS3C,GAAWzD,GAEhB,GADAwE,QAAQC,IAAI,kBAAmBzE,GACP,mBAAbA,GAA0B,CAEjC,GAAIqG,GAAaxG,SAAS6B,cAAc,MACxC2E,GAAWL,UAAYhG,EAEvBsG,EAAetE,YAAYqE,GAC3BC,EAAe3E,UAAUC,IAAI9C,EAAQiE,cAErCvC,EAAawB,YAAYsE,IAIjC,QAAS5C,GAAeC,GACpBa,QAAQC,IAAId,GACiB,mBAAlBA,KACPA,EAAahC,UAAUC,IAAI,sBAC3B+B,EAAa7B,aAAa,OAAO,UACjC6B,EAAa7B,aAAa,OAAO,UACjCtB,EAAawB,YAAY2B,IAIjC,QAASC,KAC+B,mBAAzB9E,GAAQqE,aAAgCrE,EAAQqE,cACvDoD,EAAgB5E,UAAUC,IAAI,kBAC9BpB,EAAawB,YAAYuE,IAIjC,QAASC,GAAW1H,EAASuE,GACzB,GAAIvE,EAAQoE,kBAAmB,CAGvB,GAAGG,EAAIrD,UAAYjB,KAAKS,cAChB,OAAO,CAEXT,MAAKS,cAAgB6D,EAAIrD,QAKrC,OAAO,EAGX,QAASkE,GAAUuC,GACf,IAAIjG,EAAaK,QAAQ,WAAc4F,EAAvC,CAIAC,aAAavD,EAAY0B,YAEzBL,QAAQC,IAAI,oBAAqBjE,EAEjC,EAAqBzB,KAAK+B,YAEM,kBAAtBhC,GAAQ6D,UACd7D,EAAQ6D,UAGZ,IAAIiC,GAA4B,SAASxB,GACrCoB,QAAQC,IAAI,uBAAwBrB,EAEpC,IAAI7B,GAAaf,EAAae,UAIZ,QAAfA,IACCA,EAAWC,YAAYhB,GAElBe,EAAWR,kBACZ/B,EAAUuC,WAAWC,YAAYxC,GACjCD,KAAKS,cAAgBC,SAI7Be,EAAe,KAGnBmG,GAAgBnG,EAAaoE,IASjC,QAAS+B,GAAgBnG,EAAcoE,GACnC,GAAIW,GAAkB/E,EAAagF,UAC9BC,QAAS,IACTA,QAAS,KAEVC,SAAU5G,EAAQ2D,aAClBkD,WAAY,EACZC,MAAO,GAEXL,GAAgBM,SAAWjB,EAI/B,QAASZ,MACDlF,EAAQ+D,QAAU,GAAK/D,EAAQ8D,gBAAkB,KACjDiC,EAAaC,WAAWZ,EAAWpF,EAAQ8D,iBAC3CO,EAAY4B,YAAcC,WAAWlG,EAAQ8D,iBAC7CO,EAAY8B,SAAU,GAAIC,OAAOC,UAAYhC,EAAY4B,aAIjE,QAAShB,KACL2C,aAAa7B,GACb1B,EAAY8B,QAAU,EAM1B,QAASI,KACL,GAAIuB,IAAezD,EAAY8B,SAAW,GAAIC,OAAOC,WAAchC,EAAY4B,YAAe,GAC9FwB,GAAgBM,MAAMC,MAAQF,EAAa,IArU/C,GAAI9H,GAAUC,KAAKa,aACfS,EAAYgD,EAAIhD,WAAavB,EAAQuB,SAOzC,IALqC,mBAAzBgD,GAAInD,kBACZpB,EAAUP,OAAOwI,OAAOjI,EAASuE,EAAInD,iBACrCG,EAAYgD,EAAInD,gBAAgBG,WAAaA,IAG7CmG,EAAW7B,KAAK5F,KAAMD,EAASuE,GAAnC,CAIAtE,KAAKG,SACL,IAAIF,GAAYD,KAAK2B,aAAa5B,GAAS,GAEvC+F,EAAa,KACbrE,EAAeX,SAAS6B,cAAc,MAC1ClB,GAAamB,UAAUC,IAAIvB,EAE3B,IAAI+F,GAAevG,SAAS6B,cAAc,OAMtC4E,EAAiBzG,SAAS6B,cAAc,OAC3CoE,EAAcjG,SAAS6B,cAAc,OAClC6E,EAAkB1G,SAAS6B,cAAc,OACzCiC,EAAe9D,SAAS6B,cAAc,MACtCiC,GAAaqC,UAAYlH,EAAQkE,SACrC,IAAIhD,GAAUqD,EAAIrD,QACdC,EAAQoD,EAAIpD,MAEZkD,GACA0B,WAAY,KACZI,QAAS,KACTF,YAAa,MAEbiC,GACA9H,QAASH,KAAKG,QACd+H,MAAO,UACPC,UAAW,GAAIhC,MACfpG,QAASA,EACTuE,IAAKA,EAeT,OAZAC,GAAiBqB,KAAK5F,MAEtBwF,EAAaI,KAAK5F,MAElB8E,IAEA9E,KAAKoI,QAAQH,GAETlI,EAAQqD,OAASqC,SACjBA,QAAQC,IAAIuC,GAGTxG,MAkTP/B,IAAK,aACLiB,MA9BM,WACN,MAAOnB,QAAOwI,OAAOhI,KAAKqI,oBAAqBrI,KAAKD,YAwCpDL,IAAK,mBACLiB,MAhCY,SAAC2H,GACb,MAAOA,GAAQC,YAAc,GAAKD,EAAQE,aAAe,MAloB3D1I,IAuoBgB,oBAAZ2I,UACNA,OAAO3I,OAASA","file":"toastr.js","sourcesContent":["/*\r\n * Toastr\r\n * Copyright 2012-2016\r\n * Authors: John Papa,  Tim Ferrell and Stephen Bero.\r\n * All Rights Reserved.\r\n * Use, reproduction, distribution, and modification of this code is subject to the terms and\r\n * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php\r\n *\r\n * ARIA Support: Greta Krafsig\r\n *\r\n * Project: https://github.com/CodeSeven/toastr\r\n */\r\n\r\n/* jshint -W040 */\r\nclass toastr {\r\n\r\n    constructor(options) {\r\n        this.container = null;\r\n        this.listener = null;\r\n        this.toastId = 0;\r\n        this.toastType = {\r\n            error: 'error',\r\n            info: 'info',\r\n            success: 'success',\r\n            warning: 'warning'\r\n        };\r\n        this.previousToast = undefined;\r\n        this.options = options;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the container element.\r\n     * @param options\r\n     * @param {boolean} createContainer Whether or not to create a container if one does not already exist.\r\n     * @returns {Element}\r\n     */\r\n    getContainer(options, createContainer){\r\n\r\n        if (typeof(options) == 'undefined') {\r\n            options = this.getOptions();\r\n        }\r\n\r\n        this.container = document.getElementById(options.containerId);\r\n\r\n        if (this.container !== null) {\r\n            return this.container;\r\n        }\r\n\r\n        if (createContainer) {\r\n            this.container = this.createContainer(options);\r\n        }\r\n\r\n        return this.container;\r\n    }\r\n\r\n    /**\r\n     * Creates a toast with the 'error' styling.\r\n     * @param message {string}\r\n     * @param title {string}\r\n     * @param optionsOverride {object}\r\n     */\r\n    error(message, title, optionsOverride){\r\n        return this.notify({\r\n            type: this.toastType.error,\r\n            iconClass: this.getOptions().iconClasses.error,\r\n            message: message,\r\n            optionsOverride: optionsOverride,\r\n            title: title,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a toast with the 'info' styling.\r\n     * @param message {string}\r\n     * @param title {string}\r\n     * @param optionsOverride {object}\r\n     */\r\n    info(message, title, optionsOverride) {\r\n        return this.notify({\r\n            type: this.toastType.info,\r\n            iconClass: this.getOptions().iconClasses.info,\r\n            message: message,\r\n            optionsOverride: optionsOverride,\r\n            title: title\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a toast with the 'success' styling.\r\n     * @param message {string}\r\n     * @param title {string}\r\n     * @param optionsOverride {object}\r\n     */\r\n    success(message, title, optionsOverride) {\r\n        return this.notify({\r\n            type: this.toastType.success,\r\n            iconClass: this.getOptions().iconClasses.success,\r\n            message: message,\r\n            optionsOverride: optionsOverride,\r\n            title: title\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a toast with the 'warning' styling.\r\n     * @param message {string}\r\n     * @param title {string}\r\n     * @param optionsOverride {object}\r\n     */\r\n    warning(message, title, optionsOverride) {\r\n        return this.notify({\r\n            type: this.toastType.warning,\r\n            iconClass: this.getOptions().iconClasses.warning,\r\n            message: message,\r\n            optionsOverride: optionsOverride,\r\n            title: title\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a listener to when a toast is shown.\r\n     * @param callback\r\n     */\r\n    subscribe(callback) {\r\n        this.listener = callback;\r\n    }\r\n\r\n    /**\r\n     * Clears the provided toast element from the screen, executing animations.\r\n     * @param {Element} toastElement\r\n     * @param clearOptions\r\n     */\r\n    clear(toastElement, clearOptions) {\r\n\r\n        var options = this.getOptions();\r\n\r\n        if (this.container === null) {\r\n            this.getContainer(options,false);\r\n        }\r\n\r\n        if (!this.clearToast(toastElement, options, clearOptions)) {\r\n            this.clearContainer(options);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a toast from the screen, without executing animations.\r\n     * Good to go for v3.\r\n     * @param {Element} toastElement The toast to be removed.\r\n     */\r\n    remove(toastElement) {\r\n        let options = this.getOptions();\r\n\r\n        if (typeof(this.container) === 'undefined') {\r\n            this.getContainer(options, false);\r\n        }\r\n\r\n        if(typeof(toastElement) === 'undefined' && toastElement.matches(':focus')) {\r\n            this.removeToast(toastElement);\r\n            return;\r\n        }\r\n\r\n        if (!this.container.hasChildNodes()) {\r\n            this.container.remove();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears all toasts from the container.\r\n     * @param options\r\n     */\r\n    clearContainer (options) {\r\n        if(this.container){\r\n            let numToastsToClear = this.container.children.length;\r\n\r\n            for(var i = numToastsToClear - 1; i >= 0 ; --i){\r\n                var item = this.container.children[i];\r\n\r\n                this.clearToast(item, options);\r\n            }\r\n            // this.container.childNodes.forEach(item => this.clearToast(item, options, false));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears a toast.\r\n     * @private\r\n     * @param toastElement\r\n     * @param options\r\n     * @param clearOptions\r\n     * @returns {boolean}\r\n     */\r\n    clearToast (toastElement, options, clearOptions) {\r\n\r\n        if(typeof(toastElement) !== 'undefined'){\r\n            let forceToastClosure = clearOptions && clearOptions.force ? clearOptions.force : false;\r\n\r\n            if (forceToastClosure || !toastElement.matches(':focus')) {\r\n                this.removeToast(toastElement);\r\n\r\n                // TODO: Show exit animation and do callback etc\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Removes a toast from the screen.\r\n     * @param toastElement\r\n     */\r\n    removeToast(toastElement) {\r\n\r\n        if (typeof(this.container) === 'undefined') {\r\n            this.container = this.getContainer();\r\n        }\r\n\r\n        if (this.isElementVisible(toastElement)) {\r\n            return;\r\n        }\r\n\r\n        // Use the element to get its parent so we can remove it.\r\n        toastElement.parentNode.removeChild(toastElement);\r\n\r\n        toastElement = null;\r\n\r\n        if (this.container.childNodes.length === 0 && this.container.parentNode) {\r\n            this.container.parentNode.removeChild(this.container);\r\n            this.previousToast = undefined;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Creates the toastr container.\r\n     * @private\r\n     * @param options\r\n     * @returns {Element}\r\n     * @see Updated for v3.\r\n     */\r\n    createContainer(options) {\r\n        this.container = document.createElement('div');\r\n        this.container.classList.add(options.positionClass);\r\n        this.container.setAttribute('id',options.containerId);\r\n        this.container.setAttribute('aria-live','polite');\r\n        this.container.setAttribute('role','alert');\r\n\r\n        document.querySelector(options.target).appendChild(this.container);\r\n\r\n        return this.container;\r\n    }\r\n\r\n    getDefaultOptions() {\r\n        return {\r\n            tapToDismiss: true,\r\n            toastClass: 'toast',\r\n            containerId: 'toast-container',\r\n            debug: false,\r\n\r\n            showMethod: 'fadeIn', //fadeIn, slideDown, and show are built into jQuery\r\n            showDuration: 300,\r\n            showEasing: 'swing', //swing and linear are built into jQuery\r\n            onShown: undefined,\r\n            hideMethod: 'fadeOut',\r\n            hideDuration: 1000,\r\n            hideEasing: 'swing',\r\n            onHidden: undefined,\r\n\r\n            extendedTimeOut: 1000,\r\n            iconClasses: {\r\n                error: 'toast-error',\r\n                info: 'toast-info',\r\n                success: 'toast-success',\r\n                warning: 'toast-warning'\r\n            },\r\n            iconClass: 'toast-info',\r\n            positionClass: 'toast-top-right',\r\n            timeOut: 1000, // Set timeOut and extendedTimeOut to 0 to make it sticky\r\n            titleClass: 'toast-title',\r\n            messageClass: 'toast-message',\r\n            target: 'body',\r\n            closeHtml: 'CLOSE',\r\n            newestOnTop: true,\r\n            preventDuplicates: false,\r\n            progressBar: false\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Broadcast toast notification to the listener object.\r\n     * @param {object} args Arguments to provide to the listener callback.\r\n     */\r\n    publish(args) {\r\n\r\n        if (typeof(this.listener) === 'undefined' || this.listener === null) {\r\n            return;\r\n        }\r\n\r\n        this.listener(args);\r\n    }\r\n\r\n    /**\r\n     * Core method for generating toasts.\r\n     * @param map\r\n     * @returns {Element}\r\n     */\r\n    notify(map) {\r\n        let options = this.getOptions();\r\n        let iconClass = map.iconClass || options.iconClass;\r\n\r\n        if (typeof (map.optionsOverride) !== 'undefined') {\r\n            options = Object.assign(options, map.optionsOverride);\r\n            iconClass = map.optionsOverride.iconClass || iconClass;\r\n        }\r\n\r\n        if (shouldExit.call(this, options, map)) {\r\n            return;\r\n        }\r\n\r\n        this.toastId++;\r\n        let container = this.getContainer(options, true);\r\n\r\n        var intervalId = null;\r\n        let toastElement = document.createElement('div');\r\n        toastElement.classList.add(iconClass);\r\n\r\n        let titleElement = document.createElement('div');\r\n\r\n        /**\r\n         *\r\n         * @type {Element}\r\n         */\r\n        let messageElement = document.createElement('div');\r\n\t    let iconElement = document.createElement('div');\r\n        let progressElement = document.createElement('div');\r\n        let closeElement = document.createElement('div');\r\n            closeElement.innerHTML = options.closeHtml;\r\n        let message = map.message;\r\n        let title = map.title;\r\n\r\n        var progressBar = {\r\n            intervalId: null,\r\n            hideEta: null,\r\n            maxHideTime: null\r\n        };\r\n        var response = {\r\n            toastId: this.toastId,\r\n            state: 'visible',\r\n            startTime: new Date(),\r\n            options: options,\r\n            map: map\r\n        };\r\n\r\n        personalizeToast.call(this);\r\n\r\n        displayToast.call(this);\r\n\r\n        handleEvents();\r\n\r\n        this.publish(response);\r\n\r\n        if (options.debug && console) {\r\n            console.log(response);\r\n        }\r\n\r\n        return toastElement;\r\n\r\n        function personalizeToast() {\r\n            setIcon(iconClass);\r\n            setTitle(title);\r\n            setMessage(message);\r\n            setCloseButton(closeElement);\r\n            setProgressBar();\r\n        }\r\n\r\n        function handleEvents() {\r\n\r\n            toastElement.addEventListener('mouseover', stickAround);\r\n            toastElement.addEventListener('mouseout', delayedHideToast);\r\n\r\n            if (!options.onclick && options.tapToDismiss) {\r\n                toastElement.addEventListener('click', hideToast);\r\n            }\r\n\r\n            if (options.closeButton && closeElement) {\r\n                closeElement.addEventListener('click', function (event) {\r\n                    if (event.stopPropagation) {\r\n                        event.stopPropagation();\r\n                    } else if (event.cancelBubble !== undefined && event.cancelBubble !== true) {\r\n                        event.cancelBubble = true;\r\n                    }\r\n                    hideToast(true);\r\n                });\r\n            }\r\n\r\n            if (options.onclick) {\r\n                toastElement.addEventListener('click', function () {\r\n                    options.onclick(); // TODO remove jQuery\r\n                    hideToast();\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Pushes the current toast out for display.\r\n         */\r\n        function displayToast() {\r\n\r\n            console.log(\"Appending toast to container.\", toastElement);\r\n\r\n            // container.appendChild(toastElement);\r\n            setSequence.call(this);\r\n\r\n            if(typeof(options.onShown) === 'function'){\r\n                options.onShown();\r\n            }\r\n\r\n            let animationFinishedCallback = function (args) {\r\n\r\n                console.log('Toast animation in completed.', args);\r\n\r\n                if (options.timeOut > 0) {\r\n                    intervalId = setTimeout(hideToast, options.timeOut);\r\n                    progressBar.maxHideTime = parseFloat(options.timeOut);\r\n                    progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;\r\n                    if (options.progressBar) {\r\n                        progressBar.intervalId = setInterval(updateProgress, 10);\r\n                    }\r\n                }\r\n            };\r\n\r\n            animateToastIn(toastElement, animationFinishedCallback);\r\n\r\n        }\r\n\r\n        /**\r\n         * Defines the animation for animating toasts onto the document.\r\n         * @param {Element} toastElement The element to be animated in.\r\n         * @param {Function} animationFinishedCallback The function to be executed when the animation is completed.\r\n         */\r\n        function animateToastIn(toastElement, animationFinishedCallback) {\r\n            let animateInPlayer = toastElement.animate([\r\n                {opacity: 0},\r\n                {opacity: 1}\r\n            ], {\r\n                duration: options.showDuration,\r\n                iterations: 1,\r\n                delay: 0\r\n            });\r\n            animateInPlayer.onfinish = animationFinishedCallback;\r\n        }\r\n\r\n\r\n        /**\r\n         * Adds a class to set the icon for the toast.\r\n         * Good to go for v3.\r\n         */\r\n        function setIcon(iconClass) {\r\n            if (typeof(options.iconClass)!=='undefined') {\r\n            \ticonElement.classList.add('toast-icon');\r\n                let innerContent = \"\";\r\n                switch(iconClass) {\r\n                    case  \"toast-info\":\r\n                        innerContent = \"<i class='fa fa-info-circle'></i>\";\r\n                        break;\r\n                    case \"toast-warn\":\r\n                        innerContent = \"<i class='fa fa-exclamation-triangle'></i>\";\r\n                        break;\r\n                    case \"toast-error\":\r\n                        innerContent = \"<i class='fa fa-exclamation-circle'></i>\";\r\n                        break;\r\n                    case \"toast-success\":\r\n                        innerContent = \"<i class='fa fa-check'></i>\";\r\n                        break;\r\n                }\r\n                iconElement.innerHTML = innerContent;\r\n            \ttoastElement.appendChild(iconElement);\r\n                toastElement.classList.add(options.toastClass);\r\n            }\r\n        }\r\n\r\n        function setSequence() {\r\n            let container = this.getContainer();\r\n\r\n            if (options.newestOnTop) {\r\n                var firstNode = container.firstChild;\r\n\r\n                container.insertBefore(toastElement, firstNode);\r\n\r\n                // console.log(this.container);\r\n                // TODO: Not yet supported in v3\r\n            } else {\r\n                container.appendChild(toastElement); // TODO: JSHint Possible String Violation\r\n            }\r\n\r\n            this.container = container;\r\n        }\r\n\r\n        /**\r\n         * Good to go for v3.\r\n         */\r\n        function setTitle(title) {\r\n            if (typeof(title) !== 'undefined') {\r\n                titleElement.innerHTML = title;\r\n                titleElement.classList.add(options.titleClass);\r\n                toastElement.appendChild(titleElement);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Good to go for v3.\r\n         */\r\n        function setMessage(message) {\r\n            console.log(\"message recv as\", message);\r\n            if (typeof(message) !== 'undefined') {\r\n\r\n                let mapMessage = document.createElement('div');\r\n                mapMessage.innerHTML = message;\r\n\r\n                messageElement.appendChild(mapMessage);\r\n                messageElement.classList.add(options.messageClass);\r\n\r\n                toastElement.appendChild(messageElement);\r\n            }\r\n        }\r\n\r\n        function setCloseButton(closeElement) {\r\n            console.log(closeElement);\r\n            if (typeof(closeElement) !== 'undefined') {\r\n                closeElement.classList.add('toast-close-button');\r\n                closeElement.setAttribute('role','button');\r\n                closeElement.setAttribute('type','button');\r\n                toastElement.appendChild(closeElement);\r\n            }\r\n        }\r\n\r\n        function setProgressBar() {\r\n            if (typeof(options.progressBar) !== 'undefined' && options.progressBar) {\r\n                progressElement.classList.add('toast-progress');\r\n                toastElement.appendChild(progressElement);\r\n            }\r\n        }\r\n\r\n        function shouldExit(options, map) {\r\n            if (options.preventDuplicates) {\r\n                // if (typeof(this) !== 'undefined') {\r\n\r\n                    if(map.message === this.previousToast){\r\n                            return true;\r\n                    }else {\r\n                        this.previousToast = map.message; // TODO: JSHint Possible String Violation\r\n                    }\r\n                // }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function hideToast(override) {\r\n            if (toastElement.matches(':focus') && !override) {\r\n                return;\r\n            }\r\n\r\n            clearTimeout(progressBar.intervalId);\r\n\r\n            console.log(\"Hiding toast now.\", toastElement);\r\n\r\n            let removeFunction = this.removeToast; // TODO: JSHint Possible String Violation\r\n\r\n            if(typeof(options.onHidden) === 'function'){\r\n                options.onHidden();\r\n            }\r\n\r\n            let animationFinishedCallback = function(args) {\r\n                console.log(\"Toast is now hiding.\", args);\r\n\r\n                let parentNode = toastElement.parentNode;\r\n\r\n                // Repeating myself. Try to find a way to not duplicate code.\r\n                // Use the element to get it's parent so we can remove it.\r\n                if(parentNode !== null){\r\n                    parentNode.removeChild(toastElement);\r\n\r\n                    if (!parentNode.hasChildNodes()) {\r\n                        container.parentNode.removeChild(container);\r\n                        this.previousToast = undefined;\r\n                    }\r\n                }\r\n\r\n                toastElement = null;\r\n            };\r\n\r\n            animateToastOut(toastElement,animationFinishedCallback);\r\n\r\n        }\r\n\r\n        /**\r\n         * Defines the animation for animating toasts off of the document.\r\n         * @param {Element} toastElement The element to be animated out.\r\n         * @param {Function} animationFinishedCallback The function to be executed when the animation is completed.\r\n         */\r\n        function animateToastOut(toastElement, animationFinishedCallback) {\r\n            let animateInPlayer = toastElement.animate([\r\n                {opacity: 1},\r\n                {opacity: 0}\r\n            ], {\r\n                duration: options.hideDuration,\r\n                iterations: 1,\r\n                delay: 0\r\n            });\r\n            animateInPlayer.onfinish = animationFinishedCallback;\r\n        }\r\n\r\n\r\n        function delayedHideToast() {\r\n            if (options.timeOut > 0 || options.extendedTimeOut > 0) {\r\n                intervalId = setTimeout(hideToast, options.extendedTimeOut);\r\n                progressBar.maxHideTime = parseFloat(options.extendedTimeOut);\r\n                progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;\r\n            }\r\n        }\r\n\r\n        function stickAround() {\r\n            clearTimeout(intervalId);\r\n            progressBar.hideEta = 0;\r\n            // toastElement.stop(true, true)[options.showMethod]( // TODO Remove jQuery\r\n                // {duration: options.showDuration, easing: options.showEasing}\r\n            // );\r\n        }\r\n\r\n        function updateProgress() {\r\n            var percentage = ((progressBar.hideEta - (new Date().getTime())) / progressBar.maxHideTime) * 100;\r\n            progressElement.style.width = percentage + '%';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current options for toastr.\r\n     * Includes defaults where not overriden.\r\n     * @private\r\n     * @returns {Object}\r\n     */\r\n    getOptions() {\r\n        return Object.assign(this.getDefaultOptions(), this.options);\r\n    }\r\n\r\n    /**\r\n     * Checks if the provided element is visible on screen.\r\n     * @private\r\n     * @param element\r\n     * @returns {boolean}\r\n     */\r\n    isElementVisible(element) {\r\n        return element.offsetWidth > 0 && element.offsetHeight > 0; // TODO this doesn't work\r\n    }\r\n}\r\n\r\n// This makes toastr an export for closure's sake\r\nif(typeof(window) !== 'undefined'){\r\n    window.toastr = toastr;\r\n}\r\n"],"sourceRoot":"/source/"}